<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.solution.groupware.mapper.ProjectMapper">

	<!-- 프로젝트 목록 조회  -->
	<select id="selectProjectList" resultType="ProjectVO">
		/* selectProjectList */
		SELECT
			IDX,
			NAME,
			DEPT_IDX,
			CASE
				WHEN DEPT_IDX IS NULL THEN ''
				ELSE ''
			END AS DEPT_NAME,
			PM_USER_IDX,
			CASE
				WHEN PM_USER_IDX IS NULL THEN ''
				ELSE ''
			END AS PM_USER_NAME,
			PL_USER_IDX,
			CASE
				WHEN PL_USER_IDX IS NULL THEN ''
				ELSE ''
			END AS PL_USER_NAME,
			CLIENT_IDX,
			CASE
				WHEN CLIENT_IDX IS NULL THEN ''
				ELSE ''
			END AS CLIENT_NAME,
			WORKFLOW,
			CASE
				WHEN WORKFLOW IS NULL THEN ''
				ELSE (SELECT VALUE FROM CODE_INFO WHERE USE_YN = 'Y' AND GRP_CODE = 'PROJECT_WORKFLOW' AND CODE = WORKFLOW)
			END AS WORKFLOW_NAME,
			DATE_FORMAT(PLAN_DATE_ST,  '%Y-%m-%d') AS PLAN_DATE_ST,
			DATE_FORMAT(PLAN_DATE_ED,  '%Y-%m-%d') AS PLAN_DATE_ED,
			CONTRACT_AMOUNT,
			WORK_AMOUNT,
			WORK_USER_COUNT,
			OUTLINE,
			SIGNIFICANT,
			REG_DATE,
			MOD_DATE
		FROM
			PROJECT_INFO PI
		WHERE
			PI.USE_YN = 'Y'
		ORDER BY
			PI.IDX DESC
	</select>

	<!-- 프로젝트 목록 조회 (메뉴용) -->
	<select id="selectProjectListForMenu" resultType="ProjectVO">
		/* selectProjectListForMenu */
		SELECT
			IDX,
			NAME
		FROM
			PROJECT_INFO PI
		WHERE
			PI.USE_YN = 'Y'
		ORDER BY
			PI.IDX ASC
	</select>

	<!-- 프로젝트 상세 조회  -->
	<select id="selectProjectDetail" parameterType="hashmap" resultType="ProjectVO">
		/* selectProjectDetail */
		SELECT
			IDX,
			NAME,
			DEPT_IDX,
			CASE
				WHEN DEPT_IDX IS NULL THEN ''
				ELSE ''
			END AS DEPT_NAME,
			PM_USER_IDX,
			CASE
				WHEN PM_USER_IDX IS NULL THEN ''
				ELSE ''
			END AS PM_USER_NAME,
			PL_USER_IDX,
			CASE
				WHEN PL_USER_IDX IS NULL THEN ''
				ELSE ''
			END AS PL_USER_NAME,
			CLIENT_IDX,
			CASE
				WHEN CLIENT_IDX IS NULL THEN ''
				ELSE ''
			END AS CLIENT_NAME,
			WORKFLOW,
			CASE
				WHEN WORKFLOW IS NULL THEN ''
				ELSE (SELECT VALUE FROM CODE_INFO WHERE USE_YN = 'Y' AND GRP_CODE = 'PROJECT_WORKFLOW' AND CODE = WORKFLOW)
			END AS WORKFLOW_NAME,
			DATE_FORMAT(PLAN_DATE_ST, '%Y-%m-%d') AS PLAN_DATE_ST,
			DATE_FORMAT(PLAN_DATE_ED, '%Y-%m-%d') AS PLAN_DATE_ED,
			CONTRACT_AMOUNT,
			WORK_AMOUNT,
			WORK_USER_COUNT,
			OUTLINE,
			SIGNIFICANT,
			REG_DATE,
			MOD_DATE
		FROM
			PROJECT_INFO PI
		WHERE
			PI.USE_YN = 'Y'
			AND PI.IDX = #{idx}
	</select>
	
	<!-- 프로젝트 추가  -->
	<insert id="insertProject" parameterType="ProjectVO"  useGeneratedKeys="true" keyProperty="idx">
		INSERT
		INTO
		PROJECT_INFO
		(
			NAME,
			USER_IDX,
			DEPT_IDX,
			PM_USER_IDX,
			PL_USER_IDX,
			CLIENT_IDX,
			WORKFLOW,
			PLAN_DATE_ST,
			PLAN_DATE_ED,
			CONTRACT_AMOUNT,
			WORK_AMOUNT,
			WORK_USER_COUNT,
			OUTLINE,
			SIGNIFICANT,
			REG_DATE
		)
		VALUES
		(
			#{name},
			#{userIdx},
			#{deptIdx},
			#{pmUserIdx},
			#{plUserIdx},
			#{clientIdx},
			#{workflow},
			<choose>
				<when test="planDateSt == null or planDateSt == ''">NULL,</when>
				<otherwise>#{planDateSt},</otherwise>
			</choose>
			<choose>
				<when test="planDateEd == null or planDateEd == ''">NULL,</when>
				<otherwise>#{planDateEd},</otherwise>
			</choose>
			#{contractAmount},
			#{workAmount},
			#{workUserCount},
			#{outline},
			#{significant},
			SYSDATE()
		)
	</insert>

	<!-- 일감 목록 조회 -->
	<select id="selectWorkList" parameterType="hashmap" resultType="WorkVO">
		/* selectWorkList */
		SELECT
			PWI.IDX,
			PWI.PROJECT_IDX,
			PI.NAME AS PROJECT_NAME,
			PWI.WORKFLOW,
			CASE
				WHEN PWI.WORKFLOW IS NULL THEN ''
				ELSE (SELECT VALUE FROM CODE_INFO WHERE USE_YN = 'Y' AND GRP_CODE = 'WORK_WORKFLOW' AND CODE = PWI.WORKFLOW)
			END AS WORKFLOW_NAME,
			DATE_FORMAT(WORK_DATE_ST, '%Y-%m-%d') AS PLAN_DATE_ST,
			DATE_FORMAT(WORK_DATE_ED, '%Y-%m-%d') AS PLAN_DATE_ED,
			PWI.TARGET_USER_IDX,
			CASE
				WHEN PWI.TARGET_USER_IDX IS NULL THEN ''
				ELSE (SELECT NAME FROM USER_INFO WHERE USE_YN = 'Y' AND IDX = PWI.TARGET_USER_IDX)
			END AS TARGET_USER_NAME,
			PWI.TITLE,
			PWI.CONTENT
		FROM
			PROJECT_WORK_INFO PWI
			INNER JOIN PROJECT_INFO PI
			ON PI.IDX = PWI.PROJECT_IDX
			AND PI.USE_YN = 'Y'
		WHERE
			PWI.USE_YN = 'Y'
			<if test="projectIdx != null and projectIdx != ''">
				AND PWI.PROJECT_IDX = #{projectIdx}
			</if>
		ORDER BY
			PWI.IDX DESC
	</select>

	<!-- 일감 상세 조회 -->
	<select id="selectWorkDetail" parameterType="hashmap" resultType="WorkVO">
		/* selectWorkDetail */
		SELECT
			PWI.IDX,
			PWI.PROJECT_IDX,
			PI.NAME AS PROJECT_NAME,
			PWI.WORKFLOW,
			CASE
				WHEN PWI.WORKFLOW IS NULL THEN ''
				ELSE (SELECT VALUE FROM CODE_INFO WHERE USE_YN = 'Y' AND GRP_CODE = 'WORK_WORKFLOW' AND CODE = PWI.WORKFLOW)
			END AS WORKFLOW_NAME,
			DATE_FORMAT(WORK_DATE_ST, '%Y-%m-%d') AS PLAN_DATE_ST,
			DATE_FORMAT(WORK_DATE_ED, '%Y-%m-%d') AS PLAN_DATE_ED,
			PWI.TARGET_USER_IDX,
			CASE
				WHEN PWI.TARGET_USER_IDX IS NULL THEN ''
				ELSE (SELECT NAME FROM USER_INFO WHERE USE_YN = 'Y' AND IDX = PWI.TARGET_USER_IDX)
			END AS TARGET_USER_NAME,
			PWI.TITLE,
			PWI.CONTENT,
			PWI.USER_IDX,
			(SELECT NAME FROM USER_INFO WHERE IDX = PWI.USER_IDX) AS USER_NAME,
			PWI.TARGET_USER_IDX,
			(SELECT NAME FROM USER_INFO WHERE IDX = PWI.TARGET_USER_IDX) AS TARGET_USER_NAME,
			PWI.REG_DATE
		FROM
			PROJECT_WORK_INFO PWI
			INNER JOIN PROJECT_INFO PI
				ON PI.IDX = PWI.PROJECT_IDX
				AND PI.USE_YN = 'Y'
		WHERE
			PWI.USE_YN = 'Y'
			AND PWI.IDX = #{idx}
	</select>

	<!-- 일감 댓글 목록 조회 -->
	<select id="selectWorkReplyList" parameterType="hashmap" resultType="WorkReplyVO">
		/* selectWorkReplyList */
		SELECT
			CONTENT,
			REG_DATE,
			(SELECT NAME FROM USER_INFO WHERE IDX = PWR.USER_IDX) AS USER_NAME
		FROM
			PROJECT_WORK_REPLY PWR
		WHERE
			PWR.USE_YN = 'Y'
			AND PWR.WORK_IDX = #{idx}
		ORDER BY
			PWR.IDX ASC
	</select>
	
	<!-- 일감 추가  -->
	<insert id="insertWork" parameterType="WorkVO" useGeneratedKeys="true" keyProperty="idx">
		/* insertWork */
		INSERT INTO
		PROJECT_WORK_INFO
		(
			PROJECT_IDX,
			WORKFLOW,
			TITLE,
			CONTENT,
			WORK_DATE_ST,
			WORK_DATE_ED,
			USER_IDX,
			TARGET_USER_IDX,
			REG_DATE
		)
		VALUES
		(
			#{projectIdx},
			#{workflow},
			#{title},
			#{content},
			<choose>
				<when test="workDateSt == null or workDateSt == ''">NULL,</when>
				<otherwise>#{workDateSt},</otherwise>
			</choose>
			<choose>
				<when test="workDateEd == null or workDateEd == ''">NULL,</when>
				<otherwise>#{workDateEd},</otherwise>
			</choose>
			#{userIdx},
			#{targetUserIdx},
			SYSDATE()
		)
	</insert>
	
	<!-- 일감 댓글 추가  -->
	<insert id="insertWorkReply" parameterType="WorkReplyVO" useGeneratedKeys="true" keyProperty="idx">
		/* insertWorkReply */
		INSERT INTO
		PROJECT_WORK_REPLY
		(
			PROJECT_IDX,
			WORK_IDX,
			USER_IDX,
			CONTENT,
			REG_DATE,
			WORKFLOW,
			TARGET_USER_IDX,
			TEMP_ID
		)
		VALUES
		(
			#{projectIdx},
			#{workIdx},
			#{userIdx},
			#{content},
			SYSDATE(),
			#{workflow},
			#{targetUserIdx},
			#{tempId}
		)
	</insert>
	
	<!-- 일감 상태 수정  -->
	<update id="updateWorkState" parameterType="WorkReplyVO">
		/* updateWorkState */
		UPDATE
			PROJECT_WORK_INFO
		SET
			WORKFLOW = #{workflow},
			TARGET_USER_IDX = #{targetUserIdx},
			MOD_DATE = SYSDATE()
		WHERE
			IDX = #{workIdx}
	</update>
	
	<!-- 일감 파일 추가  -->
	<insert id="insertWorkFile" parameterType="WorkFileVO">
		/* insertWorkFile */
		INSERT INTO
		PROJECT_WORK_FILE
		(
			PROJECT_IDX,
			WORK_IDX,
			USER_IDX,
			FILE_PATH,
			FILE_NAME,
			FILE_SIZE,
			FILE_TYPE,
			REG_DATE,
			TEMP_ID
		)
		VALUES
		(
			#{projectIdx},
			#{workIdx},
			#{userIdx},
			#{filePath},
			#{fileName},
			#{fileSize},
			#{fileType},
			SYSDATE(),
			#{tempId}
		)
	</insert>
	
	<!-- 일감 파일 상태 수정  -->
	<update id="updateWorkFileState" parameterType="WorkVO">
		/* updateWorkFileState */
		UPDATE
			PROJECT_WORK_FILE
		SET
			WORK_IDX = #{idx},
			MOD_DATE = SYSDATE()
		WHERE
			TEMP_ID = #{tempId}
	</update>
	
	<!-- 일감 파일 상태 수정  -->
	<update id="updateWorkFileStateForReply" parameterType="WorkReplyVO">
		/* updateWorkFileStateForReply */
		UPDATE
			PROJECT_WORK_FILE
		SET
			WORK_IDX = #{workIdx},
			WORK_REPLY_IDX = #{idx},
			MOD_DATE = SYSDATE()
		WHERE
			TEMP_ID = #{tempId}
	</update>
</mapper>